shiny::runApp()
df <- read.csv("sharingbystimlevelSHINY.csv")
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
na.omit() %>%
mutate(Model = as.factor(Model),
Type = factor(Type, levels = c('con50', 'con50dn'), labels = c('Category Label','Proper Name')),
AreaAbs = factor(AreaAbs, levels = c(1:12), labels = c('V1','TO','AT','PF[L]','PM[L]','M1[L]','A1','AB','PB','PF[i]','PM[i]','M1[i]')),
count = case_when(count==1~'1=unique',
count==2~'2=shared',
count==3~'3=shared')) %>%
filter(CAcells != "")
View(df)
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
mutate(Pattern=case_when(count=='1=unique'~Pattern,
count!='1=unique'~'shared'))
runApp()
View(df)
runApp()
{ # retrieve data
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
mutate(Pattern=case_when(count=='1=unique'~Pattern,
count!='1=unique'~'shared'))
a <- t(array(1:625, dim=c(25,25))) %>% as.data.frame()
names(a) <- c(1:25)
a <- a %>%
rownames_to_column(var = "y")
b <- melt(a, id.vars = "y", variable.name = "x", value.name = "CAcell") %>%
mutate(x = as.numeric(x),  y = as.numeric(y), CAcell = as.character(CAcell))
df <- left_join(df,b,by="CAcell")
rm(a,b)
}
rm(list=ls())
{
require(shinydashboard)
library(shiny)
library(shinyjs)
library(DT)
library(shinydashboard)
library(shinyThings)
library(shinythemes)
library(bslib)
library(shinycssloaders)
library(stringr)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(readxl)
library(ggraph)
library(igraph)
library(RColorBrewer)
library(plotly)
library(scales)
library(viridis)
library(ggplot2)
library(lemon)
library(ggpubr)
library(plotly)
library(cowplot)
}
{ # retrieve configuration functions
# source("PN_GetPalette.R", local = TRUE) # get palette
}
{ # retrieve data
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
mutate(Pattern=case_when(count=='1=unique'~Pattern,
count!='1=unique'~'shared'))
a <- t(array(1:625, dim=c(25,25))) %>% as.data.frame()
names(a) <- c(1:25)
a <- a %>%
rownames_to_column(var = "y")
b <- melt(a, id.vars = "y", variable.name = "x", value.name = "CAcell") %>%
mutate(x = as.numeric(x),  y = as.numeric(y), CAcell = as.character(CAcell))
df <- left_join(df,b,by="CAcell")
rm(a,b)
}
b <- melt(a, id.vars = "y", variable.name = "x", value.name = "CAcell") %>%
mutate(x = as.numeric(x),  y = as.numeric(y))
df <- left_join(df,b,by="CAcell")
rm(a,b)
runApp()
runApp()
source("PN_GetPalette.R", local = TRUE) # get palette
rm(list=ls())
{
require(shinydashboard)
library(shiny)
library(shinyjs)
library(DT)
library(shinydashboard)
library(shinyThings)
library(shinythemes)
library(bslib)
library(shinycssloaders)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(readxl)
library(ggraph)
library(plotly)
library(ggplot2)
library(lemon)
library(ggpubr)
library(plotly)
library(cowplot)
}
{ # retrieve configuration functions
source("PN_GetPalette.R", local = TRUE) # get palette
}
runApp()
runApp()
# My palette
# Type/Training condition (Malte's orig. palette)
Palette_Type <- c('#8A8AEE','#ED8989') # (Malte's orig. palette)
Palette_Type.Mixed <- '#ab8acc'
Palette_Type <- c('#8E96E1','#E26A88') # (Phuc's palette)
Palette_Type.Mixed <- '#7F587B'
# Palette 1
# https://coolors.co/palette/b61a13-e26a88-7f587b-8e96e1-46768b-94d197-8a9a5b-dcac7a-ee7808
Palette <- c('#B61A13','#E26A88','#7F587B','#8E96E1','#46768B','#94D197','#8A9A5B','#DCAC7A','#EE7808')
# 12 areas
Palette_AreaAbs <- c('#363285', '#1e9dca', '#9fd6e5', '#da3893', '#f6897e', '#e32526',
'#036b2d', '#3bb54f', '#90f3ab', '#f2de42', '#fd9727', '#8e5412')
# Learning condition (con50 vs con50dn) * Instance type (training vs. novel)
Palette_TypexInstance <- c('#5863A9','#8E96E1','#A73456','#E26A88')
# Palette for dissimilarity types:
# W-TT, W-TN, W-NN
Palette_DissimilarityType <- c('#007DB9','#007B75')#'#CF5B8C')
# Learning condition (con50 vs con50dn) * Dissimilarity type (W-TT vs. W-TN)
Palette_TypexDissimilarityW <- c('#007B75','#54B4AD','#9A6119','#D9984F')
# Learning condition (con50 vs con50dn) * Dissimilarity type (W-TN - W-TT)
Palette_TypexDissimilarityGeneralization <- c('#339791','#B97C34')
# Palette for sharedness
# c('Category Label unique','Proper Name unique', 'Category Label shared','Proper Name shared')
Palette_Sharedness = c('#8E96E1','#E26A88','#5863A9','#A73456')
# Learning condition (con50 vs con50dn vs con50sc) * Dissimilarity type (W-TT vs. W-TN)
Palette_TypexDissimilarityW <- c('#007B75','#54B4AD','#9A6119','#D9984F','#4B4C4B','#7F807F')
# Learning condition (con50 vs con50dn) * Dissimilarity type (W-TN - W-TT)
Palette_TypexDissimilarityGeneralization <- c('#54B4AD','#D9984F','#7F807F')
runApp()
runApp()
library(grid)
runApp()
shiny::runApp()
runApp()
{
require(shinydashboard)
library(shiny)
library(shinyjs)
library(DT)
library(shinydashboard)
library(shinyThings)
library(shinythemes)
library(bslib)
library(shinycssloaders)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(readxl)
library(ggraph)
library(plotly)
library(ggplot2)
library(lemon)
library(ggpubr)
library(plotly)
library(cowplot)
library(grid)
}
{ # retrieve palettes
# 12 areas
Palette_AreaAbs <- c('#363285', '#1e9dca', '#9fd6e5', '#da3893', '#f6897e', '#e32526',
'#036b2d', '#3bb54f', '#90f3ab', '#f2de42', '#fd9727', '#8e5412')
}
{ # retrieve data
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
mutate(Pattern=case_when(count=='1=unique'~Pattern,
count!='1=unique'~'shared'))
a <- t(array(1:625, dim=c(25,25))) %>% as.data.frame()
names(a) <- c(1:25)
a <- a %>%
rownames_to_column(var = "y")
b <- melt(a, id.vars = "y", variable.name = "x", value.name = "CAcell") %>%
mutate(x = as.numeric(x),  y = as.numeric(y))
df <- left_join(df,b,by="CAcell")
rm(a,b)
}
View(df)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# rm(list=ls())
{
require(shinydashboard)
library(shiny)
library(shinyjs)
library(DT)
library(shinydashboard)
library(shinyThings)
library(shinythemes)
library(bslib)
library(shinycssloaders)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(readxl)
library(ggraph)
library(plotly)
library(ggplot2)
library(lemon)
library(ggpubr)
library(plotly)
library(cowplot)
library(grid)
}
{ # retrieve palettes
# 12 areas
Palette_AreaAbs <- c('#363285', '#1e9dca', '#9fd6e5', '#da3893', '#f6897e', '#e32526',
'#036b2d', '#3bb54f', '#90f3ab', '#f2de42', '#fd9727', '#8e5412')
}
{ # retrieve data
df <- read.csv("sharingbystimlevelSHINY.csv")%>%
mutate(Pattern=case_when(count=='1=unique'~Pattern,
count!='1=unique'~'shared'))
a <- t(array(1:625, dim=c(25,25))) %>% as.data.frame()
names(a) <- c(1:25)
a <- a %>%
rownames_to_column(var = "y")
b <- melt(a, id.vars = "y", variable.name = "x", value.name = "CAcell") %>%
mutate(x = as.numeric(x),  y = as.numeric(y))
df <- left_join(df,b,by="CAcell")
rm(a,b)
}
# ui ----
ui = navbarPage(id = 'wholePage',
# App Title
title=div(img(src="LOGO_BLL_long_high-removebg-preview.png", height = "110px",width = "464px")),
# title = '',
theme = shinytheme("cosmo"),
## ABOUT ----
tabPanel('ABOUT', id='about',
# WHAT
fluidRow(
column(3),
column(6, align="center", includeHTML(("intro_text.html"))),
column(3)
)),
## EXPLORE ----
tabPanel('EXPLORE',
fluidRow(class='explore',
column(1),
column(10,
p(),
dashboardPage(
dashboardHeader(disable=T),
dashboardSidebar(disable=T,collapsed=T,width=0.00001),
dashboardBody(
fluidRow(class='exploreSearch',
column(2),
column(8,
box(title = NULL, solidHeader = TRUE, status = 'warning', width = NULL,
selectizeInput("model_id", "Select model", choices = unique(df$Model), multiple = F),
selectizeInput("concept_id", "Select category", choices = unique(df$Concept), multiple = F)
)),
column(2)
),
### Plot CL ====
fluidRow(
box(title = NULL, solidHeader = T, status = 'warning', width = NULL,
column(6,
strong("CATEGORY LABEL", style = "color: #006c66"),
plotOutput("illustration_CL")%>% withSpinner(type=4,color="#006c66")),
column(6,
strong("PROPER NAME", style = "color: #006c66"),
plotOutput("illustration_PN")%>% withSpinner(type=4,color="#006c66"))
)
)
)
)
),
column(1)
)
),
tags$head(
tags$style(
HTML('
#about {background-color: #DEDEDE;}
.navbar {background-color: #006c66 !important;}
.navbar-default .navbar-brand{background-color: #006c66; color: white;}
.navbar-default .navbar-nav > .active > a,
.navbar-default .navbar-nav > .active > a:focus,
.navbar-default .navbar-nav > .active > a:hover {background-color: #338A84;}
.navbar-header { width:100% }
.navbar-nav > li > a,
.navbar-brand {padding-top:4px !important; padding-bottom:0px !important; height: 60px; width: 100%; text-align: right;font-size: 20px;  }
.skin-blue .main-sidebar {background-color:  #eeeeee;}
.overview{background-color: #eeeeee;}
.explore{background-color: #eeeeee;}
/* body */
.content-wrapper, .right-side {background-color: #eeeeee;}
.content-wrapper, .left-side {background-color: #eeeeee;}
.skin-blue .left-side, .skin-blue .wrapper {
background-color: #eeeeee;
}
.overview .box.box-solid.box-warning>.box-header {color:#000000; background:#ffff;}
.overview .box.box-solid{background: #ffffff; border-bottom-color:#006c66; border-left-color:#006c66; border-right-color:#006c66; border-top-color:#006c66;}
.explore .box.box-solid.box-warning>.box-header {color:#000000; background:#ffff;}
.explore .box.box-solid{background: #ffffff; border-bottom-color:#006c66; border-left-color:#006c66; border-right-color:#006c66; border-top-color:#006c66;}
.exploreSearch .box.box-solid{background: #ffffff !important; border-bottom-color:#ffffff !important; border-left-color:#ffffff !important; border-right-color:#ffffff !important; border-top-color:#ffffff !important;}
/* collapse button*/
.fa, .fas {color: black;}
/*notification/
.shiny-notification-error {background-color:#006c66; color: #ffffff}
')))
)
# server ----
server <- function(input, output, session) {
# Preprocess outputs----
# Make reactive to store filter criteria
# model_id input
input.model_id <- reactive({input$model_id})
# concept_id input
input.concept_id <- reactive({input$concept_id})
# Make binary df
df.new.plot <- reactive({
df %>% filter(Model == input.model_id() & Concept == input.concept_id())
})
## PN ----
### Display output
# Plot
output$illustration_PN <- renderPlot({
# CL
pB=ggplot(df.new.plot() %>% filter(Type=='Proper Name'))+
geom_point(aes(x=x,y=y, color=Pattern, text=Pattern), size = 2.5)+
scale_color_manual(name = 'CAcells', values = c('#FF6F91','#1CB755','#569CFF','black'), drop=F)+
scale_y_reverse(minor_breaks = seq(0 , 25, 1), breaks = seq(0, 25, 1))+
scale_x_continuous(minor_breaks = seq(0 , 25, 1), breaks = seq(0, 25, 1))+
facet_wrap(~AreaAbs, nrow = 2, labeller=label_parsed)+
theme(aspect.ratio = 1,
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
legend.position="bottom",
legend.title=element_text(size=25),
legend.text=element_text(size=20),
strip.text.x = element_text(size = 15),
strip.text.y = element_text(size = 15))
gB <- ggplot_gtable(ggplot_build(pB))
stripr <- which(grepl('strip-t', gB$layout$name))
fills <- Palette_AreaAbs
k <- 1
for (i in stripr) {
j <- which(grepl('rect', gB$grobs[[i]]$grobs[[1]]$childrenOrder))
gB$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
grid.draw(gB)
})
## CL ----
output$illustration_CL <- renderPlot({
# CL
pA=ggplot(df.new.plot() %>% filter(Type=='Category Label'))+
geom_point(aes(x=x,y=y, color=Pattern, text=Pattern), size = 2.5)+
scale_color_manual(name = 'CAcells', values = c('#FF6F91','#1CB755','#569CFF','black'), drop=F)+
scale_y_reverse(minor_breaks = seq(0 , 25, 1), breaks = seq(0, 25, 1))+
scale_x_continuous(minor_breaks = seq(0 , 25, 1), breaks = seq(0, 25, 1))+
facet_wrap(~AreaAbs, nrow = 2, labeller=label_parsed)+
theme(aspect.ratio = 1,
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
legend.position="bottom",
legend.title=element_text(size=25),
legend.text=element_text(size=20),
strip.text.x = element_text(size = 15),
strip.text.y = element_text(size = 15))
gA <- ggplot_gtable(ggplot_build(pA))
stripr <- which(grepl('strip-t', gA$layout$name))
fills <- Palette_AreaAbs
k <- 1
for (i in stripr) {
j <- which(grepl('rect', gA$grobs[[i]]$grobs[[1]]$childrenOrder))
gA$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
k <- k+1
}
grid.draw(gA)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinywidgets)
install.packages("shinyWidgets")
runApp()
library(shinywidgets)
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
rm(list=ls())
{
library(rstudioapi)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(rstatix)
library(ggplot2)
library(lemon)
library(ggpubr)
}
directory = dirname(getSourceEditorContext()$path) %>% str_extract(pattern = '.+(?<=pn_analysis)')
fig_path = file.path(directory,'fig'); data_path = file.path(directory,'data'); script_path = file.path(directory,'script')
source(local = FALSE,echo = TRUE,print.eval = TRUE,verbose = FALSE,
file= file.path(script_path, "PN_Palette.R"))
# load count data
df <- read.csv(file.path(data_path, "sharingbyinstance.csv"))%>%
na.omit() %>%
mutate(Model = as.factor(Model),
Type = factor(Type, levels = c('con50', 'con50dn'), labels = c('Category Label','Proper Name')),
AreaAbs = factor(AreaAbs, levels = c(1:12), labels = c('V1','TO','AT','PF[L]','PM[L]','M1[L]','A1','AB','PB','PF[i]','PM[i]','M1[i]')),
count = case_when(count==1~'1=unique',
count==2~'2=shared',
count==3~'3=shared'))
extrasylvian = c('V1','TO','AT','PF[L]','PM[L]','M1[L]')
my.df <- df %>%
filter(as.numeric(substr(Pattern,2,3))<31) %>%
mutate() %>% select(-CAcells)
View(df)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
